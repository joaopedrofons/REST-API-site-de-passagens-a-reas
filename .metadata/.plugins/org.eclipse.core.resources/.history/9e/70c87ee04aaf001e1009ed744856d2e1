package site.de.passagens.rest.api.controllertest;

import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.boot.test.context.SpringBootTest;

import site.de.passagens.restapi.RestApiApplication;
import site.de.passagens.restapi.controller.TicketController;
import site.de.passagens.restapi.entity.Ticket;
import site.de.passagens.restapi.service.TicketService;

import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

@SpringBootTest(classes = RestApiApplication.class)
public class TicketControllerTest {

    @InjectMocks
    TicketController ticketController;

    @Mock
    TicketService ticketService;

    @Test
    public void testGetAllTickets() {
        Ticket ticket1 = new Ticket();
        ticket1.setId(1L);

        Ticket ticket2 = new Ticket();
        ticket2.setId(2L);

        List<Ticket> tickets = Arrays.asList(ticket1, ticket2);

        when(ticketService.getAllTickets()).thenReturn(tickets);

        List<Ticket> result = ticketController.getAllTickets();

        assertEquals(tickets.size(), result.size());
    }

    @Test
    public void testGetTicket() {
        Long id = 1L;
        Ticket ticket = new Ticket();
        ticket.setId(id);

        when(ticketService.getTicket(id)).thenReturn(ticket);

        Ticket result = ticketController.getTicket(id);

        assertEquals(ticket.getId(), result.getId());
    }

    @Test
    public void testCreateTicket() {
        Ticket ticket = new Ticket();
        ticket.setId(1L);

        when(ticketService.createTicket(ticket)).thenReturn(ticket);

        Ticket result = ticketController.createTicket(ticket);

        assertEquals(ticket.getId(), result.getId());
    }

    @Test
    public void testUpdateTicket() {
        Long id = 1L;
        Ticket ticket = new Ticket();
        ticket.setId(id);

        when(ticketService.updateTicket(id, ticket)).thenReturn(ticket);

        Ticket result = ticketController.updateTicket(id, ticket);

        assertEquals(ticket.getId(), result.getId());
    }

    @Test
    public void testDeleteTicket() {
        Long id = 1L;

        doNothing().when(ticketService).deleteTicket(id);

        ticketController.deleteTicket(id);

        verify(ticketService, times(1)).deleteTicket(id);
    }
}