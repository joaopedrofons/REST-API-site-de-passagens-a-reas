package site.de.passagens.rest.api.controllertest;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import com.fasterxml.jackson.databind.ObjectMapper;

import site.de.passagens.restapi.RestApiApplication;
import site.de.passagens.restapi.controller.AirplaneController;
import site.de.passagens.restapi.entity.Airline;
import site.de.passagens.restapi.entity.Airplane;
import site.de.passagens.restapi.service.AirplaneService;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.assertEquals;

@SpringBootTest(classes = RestApiApplication.class)
@AutoConfigureMockMvc
public class AirplaneControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Mock
    private AirplaneService airplaneService;

    @InjectMocks
    private AirplaneController airplaneController;

    private static final String AIRLINE_NAME = "Airline Test";
    private static final String MODEL_NAME = "Model Test";
    private static final int MAX_CAPACITY = 200;
    private static final int TOTAL_CAPACITY = 1000;

    private Airplane airplane;
    private Airline airline;

    @BeforeEach
    public void setup() {
        airplane = new Airplane();
        airplane.setModel(MODEL_NAME);
        airplane.setMaxCapacity(MAX_CAPACITY);

        airline = new Airline();
        airline.setName(AIRLINE_NAME);

        airplane.setAirline(airline);

        Mockito.when(airplaneService.createAirplane(any(Airplane.class))).thenReturn(airplane);
        Mockito.when(airplaneService.getTotalCapacity(anyString())).thenReturn(TOTAL_CAPACITY);
    }

    @Test
    public void testCreateAirplane() throws Exception {
        mockMvc.perform(post("/api/airplanes")
            .contentType(MediaType.APPLICATION_JSON)
            .content(new ObjectMapper().writeValueAsString(airplane)))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.model", is(MODEL_NAME)))
            .andExpect(jsonPath("$.maxCapacity", is(MAX_CAPACITY)))
            .andExpect(jsonPath("$.airline.name", is(AIRLINE_NAME)));
    }

    @Test
    public void testGetTotalCapacity() {
        int result = airplaneController.getTotalCapacity(AIRLINE_NAME);

        assertEquals(TOTAL_CAPACITY, result);
    }
}
